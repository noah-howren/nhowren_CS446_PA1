int main(int argc, char *argv[])
{
    - Immediately check if there is command line arguments for a batchfile name
    - Input and output file stream should be initialized to a batchfile or NULL
    - After performing the batch, promptUser() should display the prompt
    - If the user enters a batch file name on the commandline, then input stream file pointer and a bool variable should open read stream for the file
    - If the user doesnt enter a  batch file name, the batchmode bool should best to false, the input stram file pointer should be set to stdin
    - fgets() or fscanf() to read command line or batchfile
    - If reading batchfile, contents should be displayed
    - Should be parsed into tokens using strtok()
    - Tokens should be passed to executeCommand() function
    - If the users enters "kill" exitProgram()
    - executeCommand() returns the name of any output files if the uer performs redirect in terminal or an epty string if a redirect command is not present
    - If the user is redirecting, the string should be used to safely (perform a null check) open the redirect output file (if its not an empty string)
    - The redirectstream should be used to open the file that you're getting input (should be the first string in strtok)
}

int parseInput(char *input, char *splitWords[])
{
    int wordInd = 0;
    splitWords[0] = strtok (Links to an external site.)(input, " ");
    while(splitWords[wordInd] != NULL)
    {
        splitWords[++wordInd] = strtok(NULL, " ");
    }
    return wordInd;
}

void printError()
{
    - Should output "Shell Program Error Encountered"
    - It is used whenever the user enters nonsense or a command not implemented by me or execvp
}

void promptUser(bool isBatch)
{
    - Displays the user name, machine hostname, and current working directory username@machineName:/folder/
    - Paramater should be passed by main and be used to check if prompt should be printed
}

char *executeCommand(char *cmd, bool *isRedirect, bool *isExits char *tokens[], char *outputTokens[])
{
    - Input char* should be the command provided by the user
    - Use strdup() to make a copy of a command
    - Use strcat() to append a new line character \n to the command so that the system recognizes its
    - Use the strchr to check if the redirect symbol ">" is used and store the return in an appropriate variable
    - Return from strchr is not null then you should call  redirectCommand() which returns the output file name, so store it, and return the output file name from this function
    - If the return from strchr is null, then youn should parseInput storing the number of returned tokens
    - If the number of tokens is 0 return from function
    - If the return is null call exitProgram()
    - If the user has chosen to exit, you should immediately return the output file name
    - Otherwise you should call changeDirectories, printHelp, and launchProcesses
}

char *redirectCommand(char *special, char *line, bool *isRedirect, char *tokens[], char *outputTokens[])
{
    - The user command passed should be parsed by strtok()
    - Parse twice, once to get input file name and once to get output file name
}

bool exitProgram(char *tokens[], int numTokens, bool isRedirect)
{
    - Use strcmp() to check if the first char** argument is exit if it is then return true, unless the edge case outline below occurs, if exit is not an argument, then retunrn false.
}

void changeDirectories(char *tokens[], int numTokens)
{
    - execvp does not execute the change directories command, to implement this functionality, I will need to write your own changeDirectories function
    - It should use strcmp to check if the first char ** argument is cd, if it is then you should use chdir to change directories to the path specified by the user

}

void printHelp(char *tokens[], int numTokens)
{
    - execvp does not execute the help command so you will write your own modified help screen. Use strcmp to check if first char arg is help
    "Noah's example linux shell
    These Sehll commands are defined internally
    help - prints this screen so you can see available shell commands.
    cd   - changes directories to specified path; if not given, defaults to hostname
    exit - closes the example shell
    [input] > [output] - pipes input file into output file
    And more! If its not explicitly defined here (or in the documentation for the assignment), then the command should try to be executed by launchProcesses
    Thats how we get ls -la to work here!"

}

void launchProcesses(char *tokens[], int numTokens, bool isRedirect)
{
    - Uses execvp to execute a provided command as a process
    - This function should iterate through each provided argument, and fork a child process for each provided argument
    - Then execvp should be provided the command from the user and any associated argument tokens
    - Return from execvp should be stored to check for errors
    - Finally after checking wait (to make sure execvp was finished) it can move on
}